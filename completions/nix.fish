complete -c nix -x

# Common options
complete -c nix -l debug -d "enable debug output"
complete -c nix -l help -d "show usage information"
complete -c nix -l help-config -d "show configuration options"
complete -c nix -l no-net -d "disable substituters and consider all previously downloaded files up-to-date"
complete -c nix -l option -d "set a Nix configuration option (overriding nix.conf)"
complete -c nix -l print-build-logs -s L -d "print full build logs on stderr"
complete -c nix -l quiet -d "decrease verbosity level"
complete -c nix -l verbose -s v -d "increase verbosity level"
complete -c nix -l version -d "show version information"

# Subcommands
# Generated from `nix` help text with:
# string replace -r '([\w-]+)\s+(.+)' 'complete -c nix -n __fish_use_subcommand -a $1 -d "$2"'
complete -c nix -n __fish_use_subcommand -a add-to-store -d "add a path to the Nix store"
complete -c nix -n __fish_use_subcommand -a build -d "build a derivation or fetch a store path"
complete -c nix -n __fish_use_subcommand -a cat-nar -d "print the contents of a file inside a NAR file"
complete -c nix -n __fish_use_subcommand -a cat-store -d "print the contents of a store file on stdout"
complete -c nix -n __fish_use_subcommand -a copy -d "copy paths between Nix stores"
complete -c nix -n __fish_use_subcommand -a copy-sigs -d "copy path signatures from substituters (like binary caches)"
complete -c nix -n __fish_use_subcommand -a doctor -d "check your system for potential problems"
complete -c nix -n __fish_use_subcommand -a dump-path -d "dump a store path to stdout (in NAR format)"
complete -c nix -n __fish_use_subcommand -a edit -d "open the Nix expression of a Nix package in $EDITOR"
complete -c nix -n __fish_use_subcommand -a eval -d "evaluate a Nix expression"
complete -c nix -n __fish_use_subcommand -a hash-file -d "print cryptographic hash of a regular file"
complete -c nix -n __fish_use_subcommand -a hash-path -d "print cryptographic hash of the NAR serialisation of a path"
complete -c nix -n __fish_use_subcommand -a log -d "show the build log of the specified packages or paths, if available"
complete -c nix -n __fish_use_subcommand -a ls-nar -d "show information about the contents of a NAR file"
complete -c nix -n __fish_use_subcommand -a ls-store -d "show information about a store path"
complete -c nix -n __fish_use_subcommand -a optimise-store -d "replace identical files in the store by hard links"
complete -c nix -n __fish_use_subcommand -a path-info -d "query information about store paths"
complete -c nix -n __fish_use_subcommand -a ping-store -d "test whether a store can be opened"
complete -c nix -n __fish_use_subcommand -a repl -d "start an interactive environment for evaluating Nix expressions"
complete -c nix -n __fish_use_subcommand -a run -d "run a shell in which the specified packages are available"
complete -c nix -n __fish_use_subcommand -a search -d "query available packages"
complete -c nix -n __fish_use_subcommand -a show-config -d "show the Nix configuration"
complete -c nix -n __fish_use_subcommand -a show-derivation -d "show the contents of a store derivation"
complete -c nix -n __fish_use_subcommand -a sign-paths -d "sign the specified paths"
complete -c nix -n __fish_use_subcommand -a to-base16 -d "convert a hash to base-16 representation"
complete -c nix -n __fish_use_subcommand -a to-base32 -d "convert a hash to base-32 representation"
complete -c nix -n __fish_use_subcommand -a to-base64 -d "convert a hash to base-64 representation"
complete -c nix -n __fish_use_subcommand -a to-sri -d "convert a hash to SRI representation"
complete -c nix -n __fish_use_subcommand -a upgrade-nix -d "upgrade Nix to the latest stable version"
complete -c nix -n __fish_use_subcommand -a verify -d "verify the integrity of store paths"
complete -c nix -n __fish_use_subcommand -a why-depends -d "show why a package has another package in its closure"
